import 'dart:ui';

import 'package:bloc/bloc.dart';
import 'package:flutter/widgets.dart';
import 'package:meta/meta.dart';
import 'package:portfolio/core/constants/links/links.dart';
import 'package:portfolio/core/constants/theme/light_color.dart';
import 'package:portfolio/features/contact/presentation/contact_screen.dart';
import 'package:portfolio/features/experience/presentation/experience_screen.dart';
import 'package:portfolio/features/home/presentation/widget/about_widget.dart';
import 'package:portfolio/features/projects/presentation/projects.dart';
import 'package:portfolio/features/skills/presentation/skills_screen.dart';
import 'package:url_launcher/url_launcher.dart';

part 'home_state.dart';

class HomeCubit extends Cubit<HomeState> {
  HomeCubit() : super(HomeInitial());
  bool isDarkMode = false;

  void toggleTheme() {
    isDarkMode = !isDarkMode;
    emit(HomeTheme());
  }

  final Uri pdf = Uri.parse(Links.cv);
  final Uri github = Uri.parse(Links.github);
  final Uri instagram = Uri.parse(Links.instagram);
  final Uri linkedin = Uri.parse(Links.linkedin);

  ///////////open link in browser/////
  Future<void> openLink({required String uriType}) async {
    try {
      if (uriType == 'github') {
        await launchUrl(
            webOnlyWindowName: '_blank',
            github,
            mode: LaunchMode.externalApplication);
        emit(HomeOpenLink());
      } else if (uriType == 'linkedin') {
        await launchUrl(
            webOnlyWindowName: '_blank',
            linkedin,
            mode: LaunchMode.externalApplication);
        emit(HomeOpenLink());
      } else if (uriType == 'instagram') {
        await launchUrl(
            webOnlyWindowName: '_blank',
            instagram,
            mode: LaunchMode.externalApplication);
        emit(HomeOpenLink());
      } else if (uriType == 'cv') {
        await launchUrl(
            webOnlyWindowName: '_blank',
            pdf,
            mode: LaunchMode.externalApplication);
        emit(HomeOpenLink());
      } else if (uriType == 'youtube_cta') {
        await launchUrl(
            webOnlyWindowName: '_blank',
            Uri.parse(Links.youtubeCta),
            mode: LaunchMode.externalApplication);
        emit(HomeOpenLink());
      } else {
        throw ('Invalid link type');
      }
    } catch (e) {
      throw ('Error opening link: $e');
    }
  }

//////////////////////////////////////////////////////

  Color colorAbout = LightColor.backGroundSliderSelect;
  Color colorExperience = LightColor.backGroundSliderUnSelect;
  Color colorProjects = LightColor.backGroundSliderUnSelect;
  Color colorSkills = LightColor.backGroundSliderUnSelect;
  Color colorContact = LightColor.backGroundSliderUnSelect;
  String currentScreen = 'about';
  void toggleScreen({required String screen}) {
    currentScreen = screen;
    colorAbout = LightColor.backGroundSliderUnSelect;
    colorExperience = LightColor.backGroundSliderUnSelect;
    colorProjects = LightColor.backGroundSliderUnSelect;
    colorSkills = LightColor.backGroundSliderUnSelect;
    colorContact = LightColor.backGroundSliderUnSelect;
    switch (screen) {
      case 'about':
        colorAbout = LightColor.backGroundSliderSelect;
        break;
      case 'experience':
        colorExperience = LightColor.backGroundSliderSelect;
        break;
      case 'projects':
        colorProjects = LightColor.backGroundSliderSelect;
        break;
      case 'skills':
        colorSkills = LightColor.backGroundSliderSelect;
        break;
      case 'contact':
        colorContact = LightColor.backGroundSliderSelect;
        break;
    }

    emit(ToggleScreen());
  }


  }




